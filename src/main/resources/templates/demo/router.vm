<style>
    .router-link-active{
        background-color: #2f90ea;
    }
</style>
<div id="app">
    <h1>Hello Start!</h1>
    <p>
        <!-- 使用 router-link 组件来导航. -->
        <!-- 通过传入 `to` 属性指定链接. -->
        <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
        <router-link to="/foo/haha/hehe" tag="button">Go to Foo1</router-link>
        <router-link to="/bar?id=hello&name=world" tag="button">Go to Bar1</router-link>
        <router-link :to="{ name: 'getFoo', params: { id: 123,name:456 }}" tag="button">Go to Foo2</router-link>
        <router-link to="/change?id=hello&name=vuejs" tag="button">Go to Bar2</router-link>
        <router-link to="/barAlias?id=hello&name=deamon" tag="button">Go to BarAlias</router-link>

    </p>
    <!-- 路由出口 -->
    <!-- 路由匹配到的组件将渲染在这里 -->
    <router-view></router-view>
    <p>
    <h1>Hello End!</h1>
    </p>
</div>
<script>
Vue.http.options.emulateJSON = true;
// 1. 定义（路由）组件。
var Foo = {
    template: '<div>foo ,id={{ $route.params.id}} , name={{ $route.params.name}}.</div>',
    beforeRouteEnter : function  (to, from, next) {
        //alert('Foo,to='+to+',from='+from+',next='+next)
        next(function(vm){
            vm.loadData();
        })

    },
    beforeRouteLeave : function  (to, from, next) {
        //alert('Foo,to='+to+',from='+from+',next='+next)
        this.deleteData()
        next()
    },
    created : function  () {
        // 组件创建完后获取数据，
        // 此时 data 已经被 observed 了
        this.fetchData()
    },
    watch: {
        // 如果路由有变化，会再次执行该方法 路由变化是指url变化了
        '$route':'fetchData'
    },
    methods: {
        loadData: function () {
            alert('loadData , route = '+this.$route.path)
            var report = {
                id:'111',
                remark:'hahahehe'
            }
            #[[
            this.$http.post('/main/helloPostParam',report,{
//                emulateJSON:true
            }).then(function(response){
                console.info(response);
                console.info(response.data);
                console.info(response.code);
                console.info(response.name);
            }, function(response){
                console.info(response);
            })
            ]]#
        },
        fetchData: function () {
            //alert('fetchData')
            console.log( ' fetchData ' );
        },
        deleteData: function () {
            alert('deleteData , route = '+this.$route)
        }
    }
}
var Bar = {
    template: '<div>bar ,id={{ $route.query.id}} , name={{ $route.query.name}}.</div>',
    beforeRouteEnter : function  (to, from, next) {
        //alert('Foo,to='+to+',from='+from+',next='+next)
        next(function(vm){
            vm.loadData();
        })

    },
    beforeRouteLeave : function  (to, from, next) {
        //alert('Foo,to='+to+',from='+from+',next='+next)
        this.deleteData()
        next()
    },
    created : function  () {
        // 组件创建完后获取数据，
        // 此时 data 已经被 observed 了
        this.fetchData()
    },
    watch: {
        '$route':'fetchData'
    },
    methods: {
        loadData: function () {
            alert('loadData , route = '+this.$route.path)
        },
        fetchData: function () {
            //alert('fetchData')
            console.log( ' fetchData ' );
        },
        deleteData: function () {
            alert('deleteData , route = '+this.$route)
        }
    }
}

var routes = [
    {
        path: '/foo/:id/:name',
        name: 'getFoo',
        component: Foo,
        beforeEnter: function  (to, from, next) {
            //alert('beforeEnter,to='+to+',from='+from+',next='+next)
            next()
            //next(to)    //此写法会进入死循环，不断进入beforeEnter方法
        }
    },
    {
        path: '/bar',
        name: 'getBar',
        alias: '/barAlias',
        component: Bar
    },
    {
        path: '/change',
        redirect: '/bar'
    }
]

var router = new VueRouter({
    routes: routes
});

router.beforeEach( function(to, from, next) {
    //alert('beforeEach ,to='+to+',from='+from+',next='+next)
    next()
})

var app = new Vue({
    el:'#app',
    router:router
})

</script>